{"version":3,"sources":["<no source>","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/input/style/_module.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/color/tool/_element.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/typography/tool/_styles.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_space.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_size.scss","%3Cinput%20css%20doE8bI%3E","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/input/style/_tool.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/color/tool/_data-uri-svg.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_position.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_pseudo.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/icon/tool/_default.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/display/tool/_display.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/color/tool/_disabled.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/input/style/_scheme.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_autofill.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_nest.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_breakpoint.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/legacy/style/tool/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/input/style/_legacy.scss"],"names":[],"mappings":"AAAA;;GAAA,ACKA,UCoDQ,6CAAA,CAIA,+CAAA,CA7BJ,gDAAA,CDxBF,+BAAA,CCwBE,oDAAA,CAAA,4BAAA,CD1BF,aAAA,CEkBA,cAAA,CAGE,kBAAA,CCIA,kBAfE,CCwCA,UCvCN,CCDE,uBLgBE,8BAAA,CDfA,iBAAA,CADA,SKKJ,CLEE,wBACE,iBKAJ,CLGE,qBOCE,oTAAA,CAUA,oCAAA,CPRA,2CAAA,CADA,2BAAA,CAEA,yBAAA,CAHA,iBKEJ,CLGI,wDACE,aAAA,CGPA,qBAXA,CHoBA,SKDN,CLSA,eAEE,aAAA,CQxCA,iBHqCF,CI3BE,8JCsBE,gBAAA,CFxBA,aAAA,CLiBA,WAfE,CHoCA,mBAAA,CQ9CJ,iBAAA,CAKE,YAAA,CAHA,UH4CJ,CLIE,sBW7CE,YAAA,CAIA,kBAAA,CPyCE,UCEN,CLGE,yBGlCI,oBEkCN,CLKI,sDGvCE,kBEqCN,CLiBE,6BGtDI,gBEkDN,CLSA,kBACE,kBKNF,COlCW,mBXfP,uDAAA,CAAA,+BIgFJ,CQtFI,iBZMA,uDIoFJ,CQnFI,iBZDA,qDIuFJ,CSjHE,kKb0BE,8CAAA,CAAA,uGI2FJ,CUpHI,+CR4BE,iTF+FN,COnFW,8BLnBP,oTAAA,CAUA,oCAAA,CNNA,uDAAA,CAAA,+BIyGJ,CUlII,wDR4BE,iTFyGN,CQnFM,sFZzBF,iEIgHJ,CW9HI,wBhB+CF,6CAMI,0BKHJ,CLOA,6CAEI,0BKJJ,CAJF,CYvDI,2DCNE,8BACE,ab4IN,CQ/IA,UZ0BE,qBAAA,CAAA,mCAAA,CAAA,aI4IF,CC5JA,uBLgBE,UI2JF,CO5IS,mBXfP,mCAAA,CAAA,aIgKF,CQtKE,iBZMA,mCI2KF,CQ1KE,iBZDA,mCIgLF,CS1MA,kKb0BE,+BAAA,CAAA,8DIqLF,CQvKE,qBNtBE,kUFuMJ,COhLS,8BLvBL,kUAAA,CNQF,mCAAA,CAAA,aIoMF,CQ3KI,sFZzBF,mCIoNF,CA9FF","file":"input.min.css","sourcesContent":[null,"////\n/// Input Module\n/// @group input\n////\n\n#{ns(input)} {\n  display: block;\n  @include size(100%);\n  border-radius: space(1v) space(1v) 0 0;\n  @include text-style(md);\n  @include padding(2v 4v);\n\n  /**\n   * Style du placeholder\n   */\n  @include placeholder {\n    opacity: 1;\n    font-style: italic;\n  }\n\n  /**\n   * On applique une hauteur maximale si l'élément n'est pas un textarea\n   */\n  &:not(textarea) {\n    max-height: 2.5rem;\n  }\n\n  &[type=date] {\n    min-height: 2.5rem;\n    background-repeat: no-repeat;\n    background-position: space(calc(100% - 3v) 50%);\n    background-size: space(4v) space(4v);\n\n    &::-webkit-calendar-picker-indicator {\n      display: block;\n      @include margin-right(-1.5v);\n      opacity: 0;\n    }\n  }\n}\n\n/**\n * Ajout d'un wrapper quand on a besoin de mettre une icône\n */\n#{ns(input-wrap)} {\n  @include relative;\n  display: block;\n\n  @include has-icon {\n    @include icon-size(sm, before) {\n      @include absolute(3v, 3v, 3v);\n      @include margin(auto);\n      pointer-events: none;\n    }\n  }\n\n  &--addon {\n    @include display-flex;\n    @include size(100%);\n  }\n\n  #{ns(input)} {\n    @include padding-right(10v);\n  }\n\n  > *:first-child:not(:last-child) {\n    &#{ns(input)} {\n      @include padding-right(4v);\n    }\n\n    @include respond-from(md) {\n      border-radius: space(1v 0 0 0);\n    }\n  }\n\n  > *:last-child:not(:first-child) {\n    @include respond-from(md) {\n      border-radius: space(0 1v 0 0);\n    }\n  }\n\n  + #{ns(hint-text)} {\n    @include margin-top(2v);\n  }\n}\n\ntextarea#{ns(input)} {\n  min-height: space(15v);\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} font-size($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  INPUT\n\\* ˍˍˍˍˍˍˍˍˍ */\n.fr-input {\n  display: block;\n  width: 100%;\n  border-radius: 0.25rem 0.25rem 0 0;\n  font-size: 1rem;\n  line-height: 1.5rem;\n  padding: 0.5rem 1rem;\n  /**\n   * Style du placeholder\n   */\n  /**\n   * On applique une hauteur maximale si l'élément n'est pas un textarea\n   */\n}\n.fr-input::placeholder {\n  opacity: 1;\n  font-style: italic;\n}\n.fr-input:not(textarea) {\n  max-height: 2.5rem;\n}\n.fr-input[type=date] {\n  min-height: 2.5rem;\n  background-repeat: no-repeat;\n  background-position: calc(100% - 0.75rem) 50%;\n  background-size: 1rem 1rem;\n}\n.fr-input[type=date]::-webkit-calendar-picker-indicator {\n  display: block;\n  margin-right: -0.375rem;\n  opacity: 0;\n}\n\n/**\n * Ajout d'un wrapper quand on a besoin de mettre une icône\n */\n.fr-input-wrap {\n  position: relative;\n  display: block;\n}\n.fr-input-wrap[class^=fr-icon-]::before, .fr-input-wrap[class*=\" fr-icon-\"]::before, .fr-input-wrap[class^=fr-fi-]::before, .fr-input-wrap[class*=\" fr-fi-\"]::before {\n  --icon-size: 1rem;\n  position: absolute;\n  top: 0.75rem;\n  right: 0.75rem;\n  bottom: 0.75rem;\n  margin: auto;\n  pointer-events: none;\n}\n\n.fr-input-wrap--addon {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n}\n.fr-input-wrap .fr-input {\n  padding-right: 2.5rem;\n}\n.fr-input-wrap > *:first-child:not(:last-child).fr-input {\n  padding-right: 1rem;\n}\n@media (min-width: 48em) {\n  .fr-input-wrap > *:first-child:not(:last-child) {\n    border-radius: 0.25rem 0 0 0;\n  }\n}\n@media (min-width: 48em) {\n  .fr-input-wrap > *:last-child:not(:first-child) {\n    border-radius: 0 0.25rem 0 0;\n  }\n}\n.fr-input-wrap + .fr-hint-text {\n  margin-top: 0.5rem;\n}\n\ntextarea.fr-input {\n  min-height: 3.75rem;\n}\n\n.fr-input {\n  color: var(--text-label-grey);\n  background-color: var(--background-contrast-grey);\n  --hover: var(--background-contrast-grey-hover);\n  --active: var(--background-contrast-grey-active);\n  box-shadow: inset 0 -2px 0 0 var(--border-plain-grey);\n  /**\n  * Style du placeholder\n  */\n  /**\n  * Style pour l'état désactivé\n  */\n  /**\n  * Modificateur pour les champs validés\n  */\n  /**\n  * Modificateur pour les champs présentant des erreurs\n  */\n  /**\n  * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n  * sur les navigateurs webkit.\n  */\n}\n.fr-input::placeholder {\n  color: var(--text-mention-grey);\n}\n.fr-input:disabled {\n  color: var(--text-disabled-grey);\n  box-shadow: inset 0 -2px 0 0 var(--border-disabled-grey);\n}\n\n.fr-input--valid {\n  box-shadow: inset 0 -2px 0 0 var(--border-plain-success);\n}\n.fr-input--error {\n  box-shadow: inset 0 -2px 0 0 var(--border-plain-error);\n}\n.fr-input:autofill, .fr-input:autofill:hover, .fr-input:autofill:focus, .fr-input:-webkit-autofill, .fr-input:-webkit-autofill:hover, .fr-input:-webkit-autofill:focus {\n  box-shadow: inset 0 -2px 0 0 var(--border-plain-grey), inset 0 0 0 1000px var(--background-contrast-info);\n  -webkit-text-fill-color: var(--text-label-grey);\n}\n.fr-input[type=date] {\n  --data-uri-svg: url(\"data:image/svg+xml;charset=utf8,<svg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 24 24'><path fill='%23161616' d='M17 3h4c.55 0 1 .45 1 1v16c0 .55-.45 1-1 1H3c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z'/></svg>\");\n  background-image: var(--data-uri-svg);\n}\n:root[data-fr-theme=dark] .fr-input[type=date] {\n  --data-uri-svg: url(\"data:image/svg+xml;charset=utf8,<svg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 24 24'><path fill='%23fff' d='M17 3h4c.55 0 1 .45 1 1v16c0 .55-.45 1-1 1H3c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z'/></svg>\");\n}\n\n.fr-input[type=date]:disabled {\n  color: var(--text-disabled-grey);\n  box-shadow: inset 0 -2px 0 0 var(--border-disabled-grey);\n  --data-uri-svg: url(\"data:image/svg+xml;charset=utf8,<svg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 24 24'><path fill='%23929292' d='M17 3h4c.55 0 1 .45 1 1v16c0 .55-.45 1-1 1H3c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z'/></svg>\");\n  background-image: var(--data-uri-svg);\n}\n:root[data-fr-theme=dark] .fr-input[type=date]:disabled {\n  --data-uri-svg: url(\"data:image/svg+xml;charset=utf8,<svg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 24 24'><path fill='%23666' d='M17 3h4c.55 0 1 .45 1 1v16c0 .55-.45 1-1 1H3c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z'/></svg>\");\n}\n\n.fr-input-wrap > *:not(:last-child).fr-input:not(.fr-input--valid):not(.fr-input--error) {\n  box-shadow: inset 0 -2px 0 0 var(--border-action-high-blue-france);\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input-wrap--addon .fr-btn {\n    flex-shrink: 0;\n  }\n}\n.fr-input {\n  /**\n  * Style du placeholder\n  */\n  /**\n  * Style pour l'état désactivé\n  */\n  /**\n  * Modificateur pour les champs validés\n  */\n  /**\n  * Modificateur pour les champs présentant des erreurs\n  */\n  /**\n  * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n  * sur les navigateurs webkit.\n  */\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    color: #161616;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    background-color: #eee;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input {\n    box-shadow: inset 0 -2px 0 0 #3a3a3a;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input::placeholder {\n    color: #666;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:disabled {\n    color: #929292;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:disabled {\n    box-shadow: inset 0 -2px 0 0 #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input--valid {\n    box-shadow: inset 0 -2px 0 0 #18753c;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input--error {\n    box-shadow: inset 0 -2px 0 0 #ce0500;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:autofill, .fr-input:autofill:hover, .fr-input:autofill:focus, .fr-input:-webkit-autofill, .fr-input:-webkit-autofill:hover, .fr-input:-webkit-autofill:focus {\n    box-shadow: inset 0 -2px 0 0 #3a3a3a, inset 0 0 0 1000px #e8edff;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input:autofill, .fr-input:autofill:hover, .fr-input:autofill:focus, .fr-input:-webkit-autofill, .fr-input:-webkit-autofill:hover, .fr-input:-webkit-autofill:focus {\n    -webkit-text-fill-color: #161616;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input[type=date] {\n    background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 24 24'%3E%3Cpath fill='%23161616' d='M17 3h4c.55 0 1 .45 1 1v16c0 .55-.45 1-1 1H3c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z'/%3E%3C/svg%3E\");\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input[type=date]:disabled {\n    color: #929292;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input[type=date]:disabled {\n    box-shadow: inset 0 -2px 0 0 #e5e5e5;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input[type=date]:disabled {\n    background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 24 24'%3E%3Cpath fill='%23929292' d='M17 3h4c.55 0 1 .45 1 1v16c0 .55-.45 1-1 1H3c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h4V1h2v2h6V1h2v2zm-2 2H9v2H7V5H4v4h16V5h-3v2h-2V5zm5 6H4v8h16v-8z'/%3E%3C/svg%3E\");\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-input-wrap > *:not(:last-child).fr-input:not(.fr-input--valid):not(.fr-input--error) {\n    box-shadow: inset 0 -2px 0 0 #000091;\n  }\n}","////\n/// Input Tool\n/// @group input\n////\n\n/// Mixin pour ajouter les préfixes vendor du placeholder\n///\n/// @access public\n///\n/// @example scss\n///   .foo {\n///     @include placeholder {\n///       @content;\n///     }\n///   }\n@mixin placeholder {\n  &::placeholder {\n    @content;\n  }\n}\n","////\n/// Schemes Tools : Data URI SVG\n/// @group core\n////\n\n/// Combinaison de couleur appliquée à un svg intégré en data-uri\n/// @access public\n// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {Object} $value - le SVG en data-uri\n/// @param {String} $prop - propriété sur laquelle est assignée le svg\n/// @example @include scheme-element-data-uri-svg(text title grey, false, \"<svg><path fill='$COLOR'></path></svg>\"));\n@mixin scheme-element-data-uri-svg($tokens, $options: (), $value: \"<svg><path fill='$COLOR'></path></svg>\", $prop: background-image) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $tokens: normalise-tokens($tokens);\n  $light-colors: get-colors($tokens, hex, (theme: light));\n  $light: get-result($light-colors, $value);\n  $light: important($light, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{url(svg-encode($light, true))};\n    }\n  }\n  @else {\n    --data-uri-svg: #{url(svg-encode($light, false))};\n\n    $dark-colors: get-colors($tokens, hex, (theme: dark));\n    $dark: get-result($dark-colors, $value);\n    $dark: important($dark, $important);\n\n    @include theme-selector(dark) {\n      --data-uri-svg: #{url(svg-encode($dark, false))};\n    }\n\n    #{$prop}: var(--data-uri-svg);\n  }\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin top($top) {\n  top: space($top);\n}\n\n@mixin right($top) {\n  right: space($top);\n}\n\n@mixin bottom($top) {\n  bottom: space($top);\n}\n\n@mixin left($top) {\n  left: space($top);\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Icon default\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@function get-icon-url($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{$DIST-PATH}#{map-get($config, path)}');\n  @return important($url, $important);\n}\n\n@function get-icon-pseudo($restrain) {\n  @if $restrain == before or $restrain == after {\n    @return $restrain;\n  }\n  @return before after;\n}\n\n@mixin _icon-pseudo ($restrain: null) {\n  @include _pseudo(get-icon-pseudo($restrain)) {\n    @content;\n  }\n}\n\n@mixin icon-size ($size:md, $restrain: null) {\n  @include _icon-pseudo($restrain) {\n    --icon-size: #{icon-size($size)};\n    @content;\n  }\n}\n\n@mixin icon-image ($icon, $restrain: null, $important: false) {\n  $url: get-icon-url($icon, $important);\n\n  @include _icon-pseudo($restrain) {\n    @include mask-image($url);\n  }\n}\n\n@mixin icon-style($restrain: null) {\n  @include _icon-pseudo($restrain) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    @include mask-image-size(100% 100%);\n    @content;\n  }\n}\n\n@mixin icon-content($is-before: true, $override: false) {\n  $pseudos: before after;\n  @if not $is-before {\n    $pseudos: after before;\n  }\n  @include _pseudo(nth($pseudos, 1), '') {\n    @content;\n  }\n  @if $override {\n    @include _pseudo(nth($pseudos, 2), none);\n  }\n}\n\n@mixin icon($icon: null, $size: md, $restrain: null, $styling: true, $is-before: $restrain != after, $override: false) {\n  @if $styling {\n    @include icon-style($restrain);\n  }\n\n  @if $icon != null {\n    @include icon-image($icon, $restrain);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $restrain);\n  }\n\n  @if $is-before != null {\n    @include icon-content($is-before, $override) {\n      @content;\n    }\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-image($icon);\n    }\n  }\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Color disabled\n/// @group core\n////\n\n/// Applique les couleurs disabled sur l'élément\n/// @access public\n/// @param {map} map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - background {boolean}: true, applique le token background disabled sur la couleur de fond\n///   - text {boolean}: true, applique le token text disabled sur la couleur de texte\n///   - box-shadow {}: si true, applique le token border disabled sur l'élément avec la box-shadow par défaut (encadré de 1 px). si une valeur de box-shadow est fournie, applique cette valeur (voir get-box-shadow)\n@mixin disabled-colors($options: ()) {\n  $legacy: map-get($options, legacy);\n  $text: map-get($options, text);\n  $background: map-get($options, background);\n  $box-shadow: map-get($options, box-shadow);\n\n  @if $text {\n    @include scheme-element-text-color(disabled grey, (legacy: $legacy));\n  }\n\n  @if $background {\n    @include scheme-element-bg-color(disabled grey, (legacy: $legacy));\n  }\n\n  @if $box-shadow == true {\n    @include scheme-element-box-shadow-color(disabled grey, (legacy: $legacy));\n  }\n  @else if $box-shadow {\n    @include scheme-element-box-shadow-color(disabled grey, (legacy: $legacy), $box-shadow);\n  }\n}\n/// Applique les couleurs disabled sur l'élément avec les sélecteurs appropriés\n/// @access public\n/// @param {map} map des options :\n///   - can-be-link {boolean}: ajoute le sélecteur de lien sans href.\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - background {boolean}: true, applique le token background disabled sur la couleur de fond\n///   - text {boolean}: true, applique le token text disabled sur la couleur de texte\n///   - box-shadow {}: si true, applique le token border disabled sur l'élément avec la box-shadow par défaut (encadré de 1 px). si une valeur de box-shadow est fournie, applique cette valeur (voir get-box-shadow)\n@mixin disabled($options: ()) {\n  $selectors: '&:disabled';\n  @if map-get($options, can-be-link) {\n    $selectors: append($selectors, selector-associate(&, 'a:not([href])'), comma);\n  }\n\n  @at-root #{$selectors} {\n    @include disabled-colors($options);\n    @content;\n  }\n}\n","////\n/// Input Scheme\n/// @group input\n////\n\n@mixin _input-scheme($legacy: false) {\n  #{ns(input)} {\n    @include scheme-element-text-color(label grey, (legacy:$legacy));\n    @include scheme-element-bg-color(contrast grey, (legacy:$legacy));\n    @include scheme-element-box-shadow-color(plain grey, (legacy:$legacy), bottom-2-in);\n\n    /**\n    * Style du placeholder\n    */\n    @include placeholder {\n      @include scheme-element-text-color(mention grey, (legacy:$legacy));\n    }\n\n    /**\n    * Style pour l'état désactivé\n    */\n    @include disabled-form-field((legacy: $legacy));\n\n    /**\n    * Modificateur pour les champs validés\n    */\n    &--valid {\n      @include scheme-element-box-shadow-color(plain success, (legacy:$legacy), bottom-2-in);\n    }\n\n    /**\n    * Modificateur pour les champs présentant des erreurs\n    */\n    &--error {\n      @include scheme-element-box-shadow-color(plain error, (legacy:$legacy), bottom-2-in);\n    }\n\n    /**\n    * On applique un style lorsque la valeur est automatiquement remplie par le navigateur\n    * sur les navigateurs webkit.\n    */\n    @include autofill {\n      @include scheme-element-box-shadow-color((plain grey) (background contrast info), (legacy:$legacy), bottom-2-in all-in);\n      @include _scheme-element(-webkit-text-fill-color, text, label grey, (legacy:$legacy));\n    }\n\n    &[type=date] {\n      @include scheme-element-data-uri-svg(text title grey, (legacy: $legacy), $input-calendar-line);\n\n      @include disabled-form-field((legacy: $legacy)) {\n        @include scheme-element-data-uri-svg(text disabled grey, (legacy: $legacy), $input-calendar-line);\n      }\n    }\n  }\n\n  #{ns(input-wrap)} {\n    > *:not(:last-child) {\n      &#{ns(input)}:not(#{ns(input--valid)}):not(#{ns(input--error)}) {\n        @include scheme-element-box-shadow-color(action-high blue-france, (legacy:$legacy), bottom-2-in);\n      }\n    }\n  }\n}\n","////\n/// Core Tool : Selector Autofill\n/// @group core\n////\n\n@mixin autofill () {\n  &:autofill,\n  &:autofill:hover,\n  &:autofill:focus,\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus {\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector nest\n/// @group core\n////\n\n@mixin nest($selector: null) {\n  @if $selector {\n    #{$selector} {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Input Legacy\n/// @group input\n////\n\n@include legacy(ie11) {\n  #{ns(input-wrap)} {\n    &--addon {\n      #{ns(btn)} {\n        flex-shrink: 0;\n      }\n    }\n  }\n}\n"]}