{"version":3,"sources":["<no source>","%3Cinput%20css%20ibO8N_%3E","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/stepper/main.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/stepper/style/_module.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/typography/tool/_styles.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_space.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/display/tool/_display.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_block.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/color/tool/_element.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/typography/tool/_font-weight.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_pseudo.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/stepper/style/_tool.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_size.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_breakpoint.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/legacy/style/tool/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/stepper/style/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/stepper/style/_scheme.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;cAAA;ACAA;ECkGI,kBAAA;EAAA,iBAAA;EC5EE,mBAXA;ECLF,aAAA;EAIA,sBAAA;ALLJ;;AMJE;EH6BE,gBAAA;EAXF,mBAAA;EAGE,mBAAA;;EA4EA,8BAAA;EAAA,6BAAA;EIvEA,6BAAA;APfJ;;AEAE;ECOA,mBAAA;EAGE,mBAAA;;EA4EA,8BAAA;EAAA,6BAAA;EKpFF,gBAAA;EDaE,+BAAA;APFJ;;ASdE;EAGI,aPGa;EACb,gBAAA;EACA,iBAAA;AFWN;;AEPE;ECJA,kBAAA;EAGE,oBAAA;EIKA,+BAAA;APOJ;;AUVE;;;;;;;EACE,aAAA;AVYJ;;AERE;EACE,yDAAA;EACA,0DAAA;EACA,iDAAA;EACA,wDAAA;EACA,+CAAA;EEZE,sBAXA;EOwCA,uBAAA;EAGA,WAAA;ETjBF,4BAAA;EACA,oIAAA;EACA,4CAAA;;EQ/BF,iBAAA;EHmBE,6ZAAA;APwBJ;;AUjDI;EACE,UAAA;EACA,4BAAA;AVmDN;;AUrDI;EACE,UAAA;EACA,4BAAA;AVuDN;;AUzDI;EACE,UAAA;EACA,4BAAA;AV2DN;;AU7DI;EACE,UAAA;EACA,4BAAA;AV+DN;;AUjEI;EACE,UAAA;EACA,4BAAA;AVmEN;;AUrEI;EACE,UAAA;EACA,4BAAA;AVuEN;;AUzEI;EACE,UAAA;EACA,4BAAA;AV2EN;;AUrEI;EACE,iBAAA;AVuEN;;AUxEI;EACE,iBAAA;AV0EN;;AU3EI;EACE,iBAAA;AV6EN;;AU9EI;EACE,iBAAA;AVgFN;;AUjFI;EACE,iBAAA;AVmFN;;AUpFI;EACE,iBAAA;AVsFN;;AUvFI;EACE,iBAAA;AVyFN;;AU1FI;EACE,iBAAA;AV4FN;AY1FI;ENZF;IHkBA,kBAAA;IAGE,oBAAA;EHLF;AACF;AaTI;EPRF;IFqBI,sBAXA;IGgBF,cAAA;EP8FF;;EcnHE;IACE,aAAA;IPoBF,6SAAA;EPiGF;;EetHE;IRqBA,WAAA;EP2GF;;Ee5HE;IRiBA,WAAA;EPgHF;AAdF","file":"stepper.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  STEPPER\n\\* ˍˍˍˍˍˍˍˍˍ */\n.fr-stepper {\n  --title-spacing: 0;\n  --text-spacing: 0;\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n}\n.fr-stepper__title {\n  font-weight: 700;\n  font-size: 1.125rem;\n  line-height: 1.5rem;\n  --title-spacing: 0 0 0.75rem 0;\n  --text-spacing: 0 0 0.75rem 0;\n}\n@media (min-width: 48em) {\n  .fr-stepper__title {\n    font-size: 1.25rem;\n    line-height: 1.75rem;\n  }\n}\n.fr-stepper__state {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  --title-spacing: 0 0 0.25rem 0;\n  --text-spacing: 0 0 0.25rem 0;\n  font-weight: 400;\n}\n.fr-stepper__state::after {\n  content: \"\\a\";\n  white-space: pre;\n  line-height: 2rem;\n}\n.fr-stepper__details {\n  font-size: 0.75rem;\n  line-height: 1.25rem;\n}\n.fr-stepper .fr-stepper__steps[data-fr-steps=\"2\"][data-fr-current-step=\"2\"] + .fr-stepper__details, .fr-stepper .fr-stepper__steps[data-fr-steps=\"3\"][data-fr-current-step=\"3\"] + .fr-stepper__details, .fr-stepper .fr-stepper__steps[data-fr-steps=\"4\"][data-fr-current-step=\"4\"] + .fr-stepper__details, .fr-stepper .fr-stepper__steps[data-fr-steps=\"5\"][data-fr-current-step=\"5\"] + .fr-stepper__details, .fr-stepper .fr-stepper__steps[data-fr-steps=\"6\"][data-fr-current-step=\"6\"] + .fr-stepper__details, .fr-stepper .fr-stepper__steps[data-fr-steps=\"7\"][data-fr-current-step=\"7\"] + .fr-stepper__details, .fr-stepper .fr-stepper__steps[data-fr-steps=\"8\"][data-fr-current-step=\"8\"] + .fr-stepper__details {\n  display: none;\n}\n.fr-stepper__steps {\n  --default-steps: calc(var(--steps) - var(--current-step));\n  --default-outer: calc((100% + 6px) / var(--default-steps));\n  --default-inner: calc(var(--default-outer) - 6px);\n  --active-outer: calc((100% + 6px) / var(--current-step));\n  --active-inner: calc(var(--active-outer) - 6px);\n  margin-bottom: 0.75rem;\n  width: calc(100% + 6px);\n  height: 6px;\n  background-repeat: no-repeat;\n  background-size: calc(var(--current-step) * var(--step-width) - 6px) 100%, calc(var(--default-steps) * var(--step-width) - 6px) 100%;\n  background-position: 0 0, calc(100% - 6px) 0;\n  --current-step: 0;\n}\n.fr-stepper__steps[data-fr-steps=\"2\"] {\n  --steps: 2;\n  --step-width: calc(100% / 2);\n}\n.fr-stepper__steps[data-fr-steps=\"3\"] {\n  --steps: 3;\n  --step-width: calc(100% / 3);\n}\n.fr-stepper__steps[data-fr-steps=\"4\"] {\n  --steps: 4;\n  --step-width: calc(100% / 4);\n}\n.fr-stepper__steps[data-fr-steps=\"5\"] {\n  --steps: 5;\n  --step-width: calc(100% / 5);\n}\n.fr-stepper__steps[data-fr-steps=\"6\"] {\n  --steps: 6;\n  --step-width: calc(100% / 6);\n}\n.fr-stepper__steps[data-fr-steps=\"7\"] {\n  --steps: 7;\n  --step-width: calc(100% / 7);\n}\n.fr-stepper__steps[data-fr-steps=\"8\"] {\n  --steps: 8;\n  --step-width: calc(100% / 8);\n}\n.fr-stepper__steps[data-fr-current-step=\"1\"] {\n  --current-step: 1;\n}\n.fr-stepper__steps[data-fr-current-step=\"2\"] {\n  --current-step: 2;\n}\n.fr-stepper__steps[data-fr-current-step=\"3\"] {\n  --current-step: 3;\n}\n.fr-stepper__steps[data-fr-current-step=\"4\"] {\n  --current-step: 4;\n}\n.fr-stepper__steps[data-fr-current-step=\"5\"] {\n  --current-step: 5;\n}\n.fr-stepper__steps[data-fr-current-step=\"6\"] {\n  --current-step: 6;\n}\n.fr-stepper__steps[data-fr-current-step=\"7\"] {\n  --current-step: 7;\n}\n.fr-stepper__steps[data-fr-current-step=\"8\"] {\n  --current-step: 8;\n}\n\n.fr-stepper__title {\n  color: var(--text-title-grey);\n}\n.fr-stepper__state {\n  color: var(--text-mention-grey);\n}\n.fr-stepper__details {\n  color: var(--text-mention-grey);\n}\n.fr-stepper__steps {\n  background-image: repeating-linear-gradient(to right, var(--background-active-blue-france) 0%, var(--background-active-blue-france) var(--active-inner), transparent var(--active-inner), transparent var(--active-outer) ), repeating-linear-gradient(to right, var(--background-contrast-grey) 0%, var(--background-contrast-grey) var(--default-inner), transparent var(--default-inner), transparent var(--default-outer) );\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-stepper__title {\n    margin-bottom: 0.75rem;\n  }\n  .fr-stepper__steps {\n    display: none;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-stepper__title {\n    color: #161616;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-stepper__state {\n    color: #666;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-stepper__details {\n    color: #666;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-stepper__steps {\n    background-image: repeating-linear-gradient(to right, #000091 0%, #000091 var(--active-inner), transparent var(--active-inner), transparent var(--active-outer) ), repeating-linear-gradient(to right, #eee 0%, #eee var(--default-inner), transparent var(--default-inner), transparent var(--default-outer) );\n  }\n}","////\n/// Stepper Main\n/// @group stepper\n////\n\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  STEPPER\n\\* ˍˍˍˍˍˍˍˍˍ */\n\n@import '../../core/style/path/path-2';\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n@include _stepper-scheme;\n","////\n/// Stepper Module\n/// @group stepper\n////\n\n#{ns(stepper)} {\n  @include set-title-margin(0);\n  @include set-text-margin(0);\n  @include margin-bottom(8v);\n  @include display-flex(column);\n\n  @include title {\n    @include title-style(h6);\n    @include set-title-margin(0 0 3v 0);\n    @include set-text-margin(0 0 3v 0);\n  }\n\n  &__state {\n    @include text-style(sm);\n    @include set-title-margin(0 0 1v 0);\n    @include set-text-margin(0 0 1v 0);\n    @include font-weight(regular);\n    @include after('\\00000a') {\n      white-space: pre;\n      line-height: space(8v);\n    }\n  }\n\n  &__details {\n    @include text-style(xs);\n  }\n\n  @include hide-last-step-detail();\n\n  &__steps {\n    --default-steps: calc(var(--steps) - var(--current-step));\n    --default-outer: calc((100% + 6px) / var(--default-steps));\n    --default-inner: calc(var(--default-outer) - 6px);\n    --active-outer: calc((100% + 6px) / var(--current-step));\n    --active-inner: calc(var(--active-outer) - 6px);\n    @include margin-bottom(3v);\n    @include size(calc(100% + 6px), 6px);\n    background-repeat: no-repeat;\n    background-size: calc(var(--current-step) * var(--step-width) - 6px) 100%, calc(var(--default-steps) * var(--step-width) - 6px) 100%;\n    background-position: 0 0, calc(100% - 6px) 0;\n    @include stepper-build();\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} font-size($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Selector block\n/// @group core\n////\n\n@mixin title() {\n  &__title {\n    @content;\n  }\n}\n\n@mixin body() {\n  &__body {\n    @content;\n  }\n}\n\n@mixin list() {\n  &__list {\n    @content;\n  }\n}\n\n@mixin list-item() {\n  &__item {\n    @content;\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale ['regular'] - Type scale value from `$weight-scale` (Default to 'regular' = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight('bold');\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin build-utillity-font-weight() {\n  $fontWeightValues: map-get($font-weight-vars, values);\n  @if $fontWeightValues == 'all' {\n    $fontWeightValues: map-keys($font-weight-names);\n  }\n  @each $weight in $fontWeightValues {\n    $name: map-get($font-weight-names, $weight);\n    #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Stepper Tool\n/// @group stepper\n////\n\n@mixin stepper-build () {\n  @for $i from 2 through map-get($stepper-settings, max-steps) {\n    &#{ns-attr(steps, $i)} {\n      --steps: #{$i};\n      --step-width: calc(100% / #{$i});\n    }\n  }\n\n  --current-step: 0;\n  @for $i from 1 through map-get($stepper-settings, max-steps) {\n    &#{ns-attr(current-step, $i)} {\n      --current-step: #{$i};\n    }\n  }\n}\n\n// cache le detail de la dernière étape\n@mixin hide-last-step-detail () {\n  $lastActives: ();\n\n  @for $i from 2 through map-get($stepper-settings, max-steps) {\n    $lastActives: append($lastActives, '#{ns(stepper__steps)}#{ns-attr(steps, $i)}#{ns-attr(current-step, $i)} + #{ns(stepper__details)}', $separator: comma);\n  }\n\n  #{$lastActives} {\n    display: none;\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Stepper Module\n/// @group stepper\n////\n\n@include legacy(ie11) {\n  #{ns(stepper)} {\n    @include title {\n      @include margin-bottom(3v);\n    }\n\n    &__steps {\n      display: none;\n    }\n  }\n}\n","////\n/// Stepper Scheme\n/// @group stepper\n////\n\n@mixin _stepper-scheme($legacy: false) {\n  #{ns(stepper)} {\n    @include title {\n      @include scheme-element-text-color(title grey, (legacy:$legacy));\n    }\n\n    &__state {\n      @include scheme-element-text-color(mention grey, (legacy:$legacy));\n    }\n\n    &__details {\n      @include scheme-element-text-color(mention grey, (legacy:$legacy));\n    }\n\n    &__steps {\n      $active-step: 'repeating-linear-gradient(to right, $color#1 0%, $color#1 var(--active-inner), transparent var(--active-inner), transparent var(--active-outer) )';\n      $default-step: 'repeating-linear-gradient(to right, $color#2 0%, $color#2 var(--default-inner), transparent var(--default-inner), transparent var(--default-outer) )';\n      @include _scheme-element(background-image, background, (active blue-france) (contrast grey), (legacy:$legacy), '#{$active-step}, #{$default-step}');\n    }\n  }\n}\n"]}