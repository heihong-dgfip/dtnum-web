{"version":3,"sources":["<no source>","%3Cinput%20css%20A9MwN8%3E","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/quote/main.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/quote/style/_module.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_position.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_space.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/color/tool/_element.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_pseudo.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/icon/tool/_default.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/spacing/tool/_size.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/display/tool/_mask-image.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/display/tool/_display.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/typography/tool/_styles.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/typography/tool/_font-weight.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/typography/tool/_list.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/selector/tool/_breakpoint.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/legacy/style/tool/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/quote/style/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/core/style/icon/tool/_legacy.scss","file:///Users/jhourdeaux/workspace/project/ds/composants/dsfr/src/component/quote/style/_scheme.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;cAAA;ACAA;ECCE,kBAAA;ECyBE,SAfE;EAeF,6BAfE;EFLJ,wBAAA;EACA,4BAAA;EACA,gCAAA;EGmBE,+FAAA;ALrBJ;;AMKE;;ECqCE,cAAA;EACA,qBAAA;EACA,uDAAA;EACA,8BAAA;ECAE,uBAAA;EAGA,wBAAA;EChDJ,4BF+C2B;EE9C3B,oBF8C2B;EEpD3B,gEFsCM;EErCN,wDFqCM;EANJ,iBAAA;APNJ;;AMhBE;EAGI,WCiD+B;EL/CjC,cAAA;EEME,qBAXA;ECgBF,uCAAA;ALYJ;;AEnBE;EQdE,aAAA;EAIA,sBAAA;EAIA,uBAAA;EAIA,uBAAA;AV2BJ;;AEjBI;EENE,oBAXA;AJ+CN;;AEzBI;EEXE,oBAXA;AJuDN;;AE5BI;EMHE,mBAAA;EE7BF,aAAA;EAIA,sBAAA;EAIA,uBAAA;EAIA,uBAAA;AV4DJ;;AE9BE;EEtBE,SAfE;;EOuFF,wBAAA;AXXJ;;AEnCI;ESjCF,kBAAA;EAGE,iBAAA;ECRF,gBAAA;AZ8EF;;AE3BE;EUnDA,gBAAA;EDKA,mBAAA;EAGE,mBAAA;;EA4EA,2BAAA;AXAJ;;AE3BE;EMpBI,cAAA;ENsBF,sBAAA;EACA,kBAAA;EACA,gBAAA;EC1EF,kBAAA;EOKE,aAAA;EAIA,mBAAA;AViGJ;;AE5BI;EM5BE,WAAA;EAGA,YAAA;ARyDN;;AEtBE;EStEA,kBAAA;EAGE,oBAAA;ETqEA,kBAAA;AFmCJ;;AEhCE;EW1EA,eAAA;EACA,eAAA;EACA,aAAA;EACA,aAAA;EACA,aAAA;EACA,cAAA;EACA,kBAAA;Ab6GF;;AEtCI;ES9EF,kBAAA;EAGE,oBAAA;AXqHJ;;AEtCI;EQ/FA,aAAA;EAIA,mBAAA;EAQA,2BAAA;EAIA,eAAA;AV2HJ;;AEzCM;EACE,qBAAA;AF2CR;;AMzIE;EAGI,YJ8FmB;EI1FnB,qBAAA;EFJA,qBAHA;EAIA,sBAJA;AJ+IN;;AM/IE;EDgBE,kDAAA;ALyIJ;;AMzJE;EDgBE,0CAAA;AL6IJ;;AM7JE;EDgBE,0CAAA;ALiJJ;;AMjKE;EDgBE,wCAAA;ALqJJ;;AMrKE;EDgBE,0CAAA;ALyJJ;;AMzKE;EDgBE,sCAAA;AL6JJ;;AM7KE;EDgBE,wCAAA;ALiKJ;;AMjLE;EDgBE,0CAAA;ALqKJ;;AMrLE;EDgBE,wCAAA;ALyKJ;;AMzLE;EDgBE,sCAAA;AL6KJ;;AM7LE;EDgBE,4CAAA;ALiLJ;;AMjME;EDgBE,2CAAA;ALqLJ;;AMrME;EDgBE,+CAAA;ALyLJ;;AMzME;EDgBE,4CAAA;AL6LJ;;AM7ME;EDgBE,yCAAA;ALiMJ;;AMjNE;EDgBE,uCAAA;ALqMJ;;AMrNE;EDgBE,4CAAA;ALyMJ;;AcvNI;EZbJ;IE0BI,mBAfE;IFAF,yBAAA;IACA,wBAAA;EFFF;;EEUA;IEEI,kBAXA;IIwBA,iBAAA;ERcJ;;EErBE;IENE,cAXA;EJmDJ;;EE7BE;IEXE,cAXA;EJ2DJ;;EEhCE;IMHE,gBAAA;ER+CJ;;EEXA;ICtEA,kBAAA;IAEE,QAAA;IASA,YAAA;IKuCE,cAAA;IAGA,eAAA;IJhCA,oBAXA;EJ6GJ;AA7GF;;AeFI;ECRF;;GAAA;EVUA;;IWME,6BAAA;IACA,qBAAA;IACA,4BAAA;IARA,8DAFI;IT0CF,WAAA;IAGA,YAAA;ERwLJ;;EgBvOE;IACE,eAAA;EhBgPJ;;EM7OA;IDgBE,cAAA;ELkOF;;EMlPA;IDgBE,cAAA;ELuOF;;EMvPA;IDgBE,cAAA;EL6OF;;EM7PA;IDgBE,cAAA;ELmPF;;EMnQA;IDgBE,cAAA;ELyPF;;EMzQA;IDgBE,cAAA;EL+PF;;EM/QA;IDgBE,cAAA;ELqQF;;EMrRA;IDgBE,cAAA;EL2QF;;EM3RA;IDgBE,cAAA;ELiRF;;EMjSA;IDgBE,cAAA;ELuRF;;EMvSA;IDgBE,cAAA;EL6RF;;EM7SA;IDgBE,cAAA;ELmSF;;EMnTA;IDgBE,cAAA;ELySF;;EMzTA;IDgBE,cAAA;EL+SF;;EM/TA;IDgBE,cAAA;ELqTF;;EMrUA;IDgBE,cAAA;EL2TF;;EM3UA;IDgBE,cAAA;ELiUF;;EMjVA;IDgBE,cAAA;ELuUF;;EkBjWA;Ib0BE,yDAAA;EL6UF;AA/GF","file":"quote.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  QUOTE\n\\* ˍˍˍˍˍˍˍˍˍ */\n.fr-quote {\n  position: relative;\n  margin: 0;\n  padding: 0 0.5rem 2rem 0.5rem;\n  background-size: 50% 1px;\n  background-repeat: no-repeat;\n  background-position: 0.5rem 100%;\n}\n@media (min-width: 48em) {\n  .fr-quote {\n    padding: 0 0 0 2rem;\n  }\n}\n@media (min-width: 48em) {\n  .fr-quote {\n    background-size: 1px 100%;\n    background-position: 0 0;\n  }\n}\n.fr-quote::before, .fr-quote::after {\n  flex: 0 0 auto;\n  display: inline-block;\n  vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n  background-color: currentColor;\n  width: var(--icon-size);\n  height: var(--icon-size);\n  -webkit-mask-size: 100% 100%;\n  mask-size: 100% 100%;\n}\n.fr-quote::before, .fr-quote::after {\n  -webkit-mask-image: url(\"../../icons/editor/fr--quote-line.svg\");\n  mask-image: url(\"../../icons/editor/fr--quote-line.svg\");\n}\n.fr-quote::before, .fr-quote::after {\n  --icon-size: 2rem;\n}\n.fr-quote::before {\n  content: \"\";\n  display: block;\n  margin-bottom: 0.5rem;\n}\n.fr-quote--column {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n}\n@media (min-width: 48em) {\n  .fr-quote--column {\n    margin-left: 13rem;\n  }\n}\n@media (min-width: 48em) {\n  .fr-quote--column {\n    min-height: 13rem;\n  }\n}\n.fr-quote--column .fr-quote__author {\n  margin-left: 5.25rem;\n}\n@media (min-width: 48em) {\n  .fr-quote--column .fr-quote__author {\n    margin-left: 0;\n  }\n}\n.fr-quote--column .fr-quote__source {\n  margin-left: 5.25rem;\n}\n@media (min-width: 48em) {\n  .fr-quote--column .fr-quote__source {\n    margin-left: 0;\n  }\n}\n.fr-quote--column figcaption {\n  min-height: 4.25rem;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: center;\n}\n@media (min-width: 48em) {\n  .fr-quote--column figcaption {\n    min-height: auto;\n  }\n}\n.fr-quote blockquote {\n  margin: 0;\n  --text-spacing: 0 0 1rem;\n}\n.fr-quote blockquote p {\n  font-size: 1.25rem;\n  line-height: 2rem;\n  font-weight: 700;\n}\n.fr-quote__author {\n  font-weight: 700;\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  --text-spacing: 0 0 0.25rem;\n}\n.fr-quote__image {\n  width: 4.25rem;\n  background-size: cover;\n  border-radius: 50%;\n  overflow: hidden;\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n}\n.fr-quote__image img {\n  width: 100%;\n  height: 100%;\n}\n@media (min-width: 48em) {\n  .fr-quote__image {\n    position: absolute;\n    top: 50%;\n    left: -13rem;\n    width: 11.5rem;\n    height: 11.5rem;\n    margin-top: -5.75rem;\n  }\n}\n.fr-quote cite {\n  font-size: 0.75rem;\n  line-height: 1.25rem;\n  font-style: italic;\n}\n.fr-quote figcaption {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n.fr-quote figcaption li {\n  font-size: 0.75rem;\n  line-height: 1.25rem;\n}\n.fr-quote figcaption .fr-quote__source {\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  flex-wrap: wrap;\n}\n.fr-quote figcaption .fr-quote__source li {\n  display: inline-block;\n}\n.fr-quote figcaption .fr-quote__source li:not(:last-child)::after {\n  content: \"·\";\n  display: inline-block;\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n\n.fr-quote {\n  background-image: linear-gradient(0deg, var(--border-default-grey), var(--border-default-grey));\n}\n.fr-quote::before {\n  color: var(--artwork-minor-blue-france);\n}\n.fr-quote--green-tilleul-verveine::before {\n  color: var(--artwork-minor-green-tilleul-verveine);\n}\n\n.fr-quote--green-bourgeon::before {\n  color: var(--artwork-minor-green-bourgeon);\n}\n\n.fr-quote--green-emeraude::before {\n  color: var(--artwork-minor-green-emeraude);\n}\n\n.fr-quote--green-menthe::before {\n  color: var(--artwork-minor-green-menthe);\n}\n\n.fr-quote--green-archipel::before {\n  color: var(--artwork-minor-green-archipel);\n}\n\n.fr-quote--blue-ecume::before {\n  color: var(--artwork-minor-blue-ecume);\n}\n\n.fr-quote--blue-cumulus::before {\n  color: var(--artwork-minor-blue-cumulus);\n}\n\n.fr-quote--purple-glycine::before {\n  color: var(--artwork-minor-purple-glycine);\n}\n\n.fr-quote--pink-macaron::before {\n  color: var(--artwork-minor-pink-macaron);\n}\n\n.fr-quote--pink-tuile::before {\n  color: var(--artwork-minor-pink-tuile);\n}\n\n.fr-quote--yellow-tournesol::before {\n  color: var(--artwork-minor-yellow-tournesol);\n}\n\n.fr-quote--yellow-moutarde::before {\n  color: var(--artwork-minor-yellow-moutarde);\n}\n\n.fr-quote--orange-terre-battue::before {\n  color: var(--artwork-minor-orange-terre-battue);\n}\n\n.fr-quote--brown-cafe-creme::before {\n  color: var(--artwork-minor-brown-cafe-creme);\n}\n\n.fr-quote--brown-caramel::before {\n  color: var(--artwork-minor-brown-caramel);\n}\n\n.fr-quote--brown-opera::before {\n  color: var(--artwork-minor-brown-opera);\n}\n\n.fr-quote--beige-gris-galet::before {\n  color: var(--artwork-minor-beige-gris-galet);\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n  * Correction largeur max du texte\n  */\n  .fr-quote::before, .fr-quote::after {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n  }\n  .fr-quote::before, .fr-quote::after {\n    background-image: url(\"../../icons/editor/fr--quote-line.svg\");\n  }\n  .fr-quote::before, .fr-quote::after {\n    width: 2rem;\n    height: 2rem;\n  }\n  .fr-quote blockquote {\n    max-width: 100%;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote::before {\n    color: #6a6af4;\n  }\n}\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-tilleul-verveine::before {\n    color: #b7a73f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-bourgeon::before {\n    color: #68a532;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-emeraude::before {\n    color: #00a95f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-menthe::before {\n    color: #009081;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--green-archipel::before {\n    color: #009099;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--blue-ecume::before {\n    color: #465f9d;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--blue-cumulus::before {\n    color: #417dc4;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--purple-glycine::before {\n    color: #a558a0;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--pink-macaron::before {\n    color: #e18b76;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--pink-tuile::before {\n    color: #ce614a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--yellow-tournesol::before {\n    color: #c8aa39;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--yellow-moutarde::before {\n    color: #c3992a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--orange-terre-battue::before {\n    color: #e4794a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--brown-cafe-creme::before {\n    color: #d1b781;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--brown-caramel::before {\n    color: #c08c65;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--brown-opera::before {\n    color: #bd987a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote--beige-gris-galet::before {\n    color: #aea397;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-quote {\n    background-image: linear-gradient(0deg, #e5e5e5, #e5e5e5);\n  }\n}","////\n/// Quote Main\n/// @group quote\n////\n\n/* ¯¯¯¯¯¯¯¯¯ *\\\n  QUOTE\n\\* ˍˍˍˍˍˍˍˍˍ */\n\n@import '../../core/style/path/path-2';\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n@include _quote-scheme;\n","////\n/// Quote Module\n/// @group quote\n////\n\n#{ns(quote)} {\n  @include relative;\n  @include margin(0);\n  @include padding(0 2v 8v 2v);\n  @include padding(0 0 0 8v, md);\n\n  background-size: 50% 1px;\n  background-repeat: no-repeat;\n  background-position: space(2v 100%);\n\n  @include respond-from(md) {\n    background-size: 1px 100%;\n    background-position: 0 0;\n  }\n\n  @include icon(quote-line,lg) {\n    display: block;\n    @include margin-bottom(2v);\n  }\n\n  &--column {\n    @include display-flex(column, flex-start, center);\n    @include margin-left(52v, md);\n\n    @include respond-from(md) {\n      @include min-height(52v);\n    }\n\n    #{ns(quote__author)} {\n      @include margin-left(21v);\n      @include margin-left(0, md);\n    }\n\n    #{ns(quote__source)} {\n      @include margin-left(21v);\n      @include margin-left(0, md);\n    }\n\n    figcaption {\n      @include min-height(17v);\n      @include display-flex(column, flex-start, center);\n\n      @include respond-from(md) {\n        @include min-height(auto);\n      }\n    }\n  }\n\n  blockquote {\n    @include margin(0);\n    @include set-text-margin(0 0 4v);\n\n    p {\n      @include text-style(xl);\n      @include font-weight(bold);\n\n      // Pour ajouter les guillets en css\n      // @include before('«\\0000A0', 'inline-block');\n\n      // &:last-of-type() {\n      //   @include after('\\0000A0»', 'inline-block');\n      // }\n    }\n  }\n\n  &__author {\n    @include font-weight(bold);\n    @include text-style(sm);\n    @include set-text-margin(0 0 1v);\n  }\n\n  &__image {\n    @include size(17v);\n    background-size: cover;\n    border-radius: 50%;\n    overflow: hidden;\n    @include absolute;\n    @include display-flex;\n\n    img {\n      @include size(100%, 100%);\n    }\n\n    @include respond-from(md) {\n      @include absolute(50%,null,null,-52v,46v,46v);\n      @include margin-top(-23v);\n    }\n  }\n\n  cite {\n    @include text-style(xs);\n    font-style: italic;\n  }\n\n  figcaption {\n    @include disable-list-style;\n\n    li {\n      @include text-style(xs);\n    }\n\n    #{ns(quote)}__source {\n      @include display-flex(row,null,flex-start,wrap);\n\n      li {\n        display: inline-block;\n\n        &:not(:last-child) {\n          @include after('·', 'inline-block') {\n            @include padding-x(1v);\n          }\n        }\n      }\n    }\n  }\n}\n","////\n/// Core Tool : Spacing position\n/// @group core\n////\n\n@mixin position($position, $top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  position: #{$position};\n  @if $top != null {\n    top: #{space($top)};\n  }\n  @if $right != null {\n    right: #{space($right)};\n  }\n  @if $bottom != null {\n    bottom: #{space($bottom)};\n  }\n  @if $left != null {\n    left: #{space($left)};\n  }\n\n  @include size($width, $height);\n\n  @content;\n}\n\n@mixin relative($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(relative, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin absolute($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(absolute, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin fixed($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(fixed, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin sticky($top: null, $right: null, $bottom: null, $left: null, $width: null, $height: null) {\n  @include position(sticky, $top, $right, $bottom, $left, $width, $height);\n}\n\n@mixin top($top) {\n  top: space($top);\n}\n\n@mixin right($top) {\n  right: space($top);\n}\n\n@mixin bottom($top) {\n  bottom: space($top);\n}\n\n@mixin left($top) {\n  left: space($top);\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property ['margin'] - propriété à appliquer à l'espacement `['margin', 'padding']`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `['x', 'y', 'top', 'right', 'bottom', 'left']`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing('margin', 6v, 'bottom');\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $legacy-target: null;\n  @if $legacy {\n    $legacy-target: ie11;\n  }\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @include legacy($legacy-target) {\n    #{$prop}: #{$result};\n  }\n\n  @if ($hover == true or ($hover == inherit and $legacy == false)) and ($context == background and length($tokens) == 1) {\n    $nest-hover: null;\n    $prop-hover: --hover;\n    $result-hover: #{important(get-color(nth($tokens, 1), decision, (var: true, hover: true)), $important)};\n    $nest-active: null;\n    $prop-active: --active;\n    $result-active: #{important(get-color(nth($tokens, 1), decision, (var: true, active: true)), $important)};\n\n    @if $legacy or $standalone {\n      $type: hex;\n      $option: (theme: light);\n\n      $nest-hover: '&:hover';\n      $prop-hover: $prop;\n      $result-hover: #{important(get-color(nth($tokens, 1), hex, (hover: true)), $important)};\n      $nest-active: '&:active';\n      $prop-active: $prop;\n      $result-active: #{important(get-color(nth($tokens, 1), hex, (active: true)), $important)};\n    }\n\n    @include legacy($legacy-target) {\n      @include nest($nest-hover) {\n        #{$prop-hover}: #{$result-hover};\n      }\n\n      @include nest($nest-active) {\n        #{$prop-active}: #{$result-active};\n      }\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: inherit));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $tokens: normalise-tokens(default grey, background);\n  $value: important(transparent, $important);\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n\n      @if $hover {\n        &:hover {\n          background-color: rgba(0, 0, 0, 0.05);\n        }\n\n        &:active {\n          background-color: rgba(0, 0, 0, 0.1);\n        }\n      }\n    }\n  }\n  @else {\n    background-color: #{$value};\n    @if $hover {\n      --hover: inherit;\n      --active: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Icon default\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size ['md'] - Icon size from `$icon-size-map` (Default to 'md' = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@function get-icon-url($icon, $important: false) {\n  $config: map-get($icons-config, $icon);\n  $url: url('#{$DIST-PATH}#{map-get($config, path)}');\n  @return important($url, $important);\n}\n\n@function get-icon-pseudo($restrain) {\n  @if $restrain == before or $restrain == after {\n    @return $restrain;\n  }\n  @return before after;\n}\n\n@mixin _icon-pseudo ($restrain: null) {\n  @include _pseudo(get-icon-pseudo($restrain)) {\n    @content;\n  }\n}\n\n@mixin icon-size ($size:md, $restrain: null) {\n  @include _icon-pseudo($restrain) {\n    --icon-size: #{icon-size($size)};\n    @content;\n  }\n}\n\n@mixin icon-image ($icon, $restrain: null, $important: false) {\n  $url: get-icon-url($icon, $important);\n\n  @include _icon-pseudo($restrain) {\n    @include mask-image($url);\n  }\n}\n\n@mixin icon-style($restrain: null) {\n  @include _icon-pseudo($restrain) {\n    flex: 0 0 auto;\n    display: inline-block;\n    vertical-align: calc((0.75em - var(--icon-size)) * 0.5);\n    background-color: currentColor;\n    @include size(var(--icon-size), var(--icon-size));\n    @include mask-image-size(100% 100%);\n    @content;\n  }\n}\n\n@mixin icon-content($is-before: true, $override: false) {\n  $pseudos: before after;\n  @if not $is-before {\n    $pseudos: after before;\n  }\n  @include _pseudo(nth($pseudos, 1), '') {\n    @content;\n  }\n  @if $override {\n    @include _pseudo(nth($pseudos, 2), none);\n  }\n}\n\n@mixin icon($icon: null, $size: md, $restrain: null, $styling: true, $is-before: $restrain != after, $override: false) {\n  @if $styling {\n    @include icon-style($restrain);\n  }\n\n  @if $icon != null {\n    @include icon-image($icon, $restrain);\n  }\n\n  @if $size != null {\n    @include icon-size($size, $restrain);\n  }\n\n  @if $is-before != null {\n    @include icon-content($is-before, $override) {\n      @content;\n    }\n  }\n}\n\n@function filter-icons($category, $config: $icons-config) {\n  $filtered: ();\n  @each $icon, $setting in $config {\n    @if map-get($setting, category) == $category {\n      $filtered: map-merge($filtered, (#{$icon}: $setting));\n    }\n  }\n  @return $filtered;\n}\n\n@mixin generate-icons($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-image($icon);\n    }\n  }\n}\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Core Tool : mask-image\n/// @group core\n////\n\n@mixin mask-image($value) {\n  -webkit-mask-image: $value;\n  mask-image: $value;\n}\n\n@mixin mask-image-size($value) {\n  -webkit-mask-size: $value;\n  mask-size: $value;\n}\n\n@mixin mask-image-position($value) {\n  -webkit-mask-position: $value;\n  mask-position: $value;\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} font-size($font-size) #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  @if $settings {\n    $append: '';\n    @if $important {\n      $append: ' !important';\n    }\n\n    @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n    @if $with-spacing {\n      @include _space-text($settings);\n    }\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale ['regular'] - Type scale value from `$weight-scale` (Default to 'regular' = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight('bold');\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin build-utillity-font-weight() {\n  $fontWeightValues: map-get($font-weight-vars, values);\n  @if $fontWeightValues == 'all' {\n    $fontWeightValues: map-keys($font-weight-names);\n  }\n  @each $weight in $fontWeightValues {\n    $name: map-get($font-weight-names, $weight);\n    #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Tool : Reset list\n/// @group core\n////\n\n@mixin enable-list-style() {\n  $selector: null;\n\n  @if & == null {\n    $selector: ':root';\n  }\n\n  @include nest($selector) {\n    --ul-type: disc;\n    --ol-type: decimal;\n    --ul-start: #{space(4v)};\n    --ol-start: #{space(6v)};\n    --xl-block: #{space(2v)};\n    --li-bottom: #{space(1v)};\n    --xl-base: 1em;\n    --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  }\n}\n\n@mixin disable-list-style() {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n\n@mixin enable-list-style-legacy($unify: false) {\n  $ul: ul;\n  $ol: ol;\n\n  @if $unify {\n    $ul: selector-associate('&', 'ul');\n    $ol: selector-associate('&', 'ol');\n  }\n\n  @at-root {\n    #{$ul} {\n      list-style-type: disc;\n    }\n\n    #{$ol} {\n      list-style-type: decimal;\n    }\n\n    #{$ul},\n    #{$ol} {\n      @include padding-left(4v);\n      @include margin-y(2v);\n    }\n  }\n}\n\n@mixin disable-list-style-legacy($unify: false) {\n  $ul: '#{&} ul';\n  $ol: '#{&} ol';\n\n  @if $unify {\n    $ul: selector-associate('#{&}', 'ul');\n    $ol: selector-associate('#{&}', 'ol');\n  }\n\n  @at-root {\n    #{$ul} {\n      list-style-type: none;\n    }\n\n    #{$ol} {\n      list-style-type: none;\n    }\n\n    #{$ul},\n    #{$ol} {\n      @include padding-left(0);\n      @include margin-y(0);\n    }\n  }\n}\n","////\n/// Core Tool : Selector Breakpoint\n/// @group core\n////\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-from(md) {\n///     }\n///   }\n@mixin respond-from($media) {\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null {\n    @media (min-width: nth($limits, 1)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Set media query styles\n///\n/// @param {String} $media [md] - Layout size `['xs', 'sm', 'md', 'lg', 'xl']`\n///\n/// @example scss -\n///   .foo {\n///     @include respond-to(md) {\n///     }\n///   }\n@mixin respond-to($media) {\n\n  @debug 'afin de rester mobile first, n‘utiliser la mixin respond-to uniquement s‘il n‘y a pas d‘autre alternative, lui préférer systématiquement la mixin respond-from';\n\n  $limits: map_get($breakpoints, $media);\n\n  @if $limits != null and length($limits) == 2 {\n    @media (max-width: nth($limits, 2)) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n  @else {\n    @content;\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Quote Legacy\n/// @group quote\n////\n\n@include legacy(ie11) {\n  /**\n  * Correction largeur max du texte\n  */\n  #{ns(quote)} {\n    @include icon-legacy(quote-line,lg);\n\n    blockquote {\n      max-width: 100%;\n    }\n  }\n}\n","////\n/// Core Tool : Icon legacy\n/// @group core\n////\n\n@mixin icon-size-legacy($size:md, $restrain: null) {\n  @include _icon-pseudo($restrain) {\n    $size: icon-size($size);\n    @include size($size, $size);\n    @content;\n  }\n}\n\n@mixin icon-image-legacy($icon, $restrain: null, $important: false) {\n  $url: get-icon-url($icon, $important);\n  @include _icon-pseudo($restrain) {\n    background-image: $url;\n  }\n}\n\n@mixin icon-style-legacy($restrain: null) {\n  @include _icon-pseudo($restrain) {\n    background-color: transparent;\n    background-size: 100%;\n    background-repeat: no-repeat;\n    @content;\n  }\n}\n\n@mixin icon-legacy($icon: null, $size: md, $restrain: null, $styling: true) {\n  @if $styling {\n    @include icon-style-legacy($restrain);\n  }\n\n  @if $icon != null {\n    @include icon-image-legacy($icon, $restrain);\n  }\n\n  @if $size != null {\n    @include icon-size-legacy($size, $restrain);\n  }\n\n  @include _icon-pseudo($restrain) {\n    @content;\n  }\n}\n\n@mixin generate-icons-legacy($config: $icons-config) {\n  @each $icon, $setting in $config {\n    #{ns(icon-#{$icon})} {\n      @include icon-image-legacy($icon);\n    }\n  }\n}\n","////\n/// quote Scheme\n/// @group quote\n////\n\n@mixin _quote-scheme($legacy: false) {\n  #{ns(quote)} {\n    @include before {\n      @include scheme-element-text-color((artwork minor blue-france), (legacy:$legacy));\n    }\n\n    @include accent-modifiers {\n      @include before {\n        @include scheme-element-text-color((artwork minor accent), (legacy:$legacy));\n      }\n    }\n\n    @include scheme-element-bg-image-color((border default grey), (legacy:$legacy));\n  }\n}\n"]}